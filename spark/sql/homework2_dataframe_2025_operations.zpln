{
  "paragraphs": [
    {
      "title": "Read the data and display sample data",
      "text": "%pyspark\r\n\r\nmovies_df = spark.read.csv(\"gs://oklev-uku-datasets/movie-ratings/movies.csv\", header=True)\r\nratings_df = spark.read.csv(\"gs://oklev-uku-datasets/movie-ratings/ratings.csv\", header=True)\r\n\r\nratings_df = ratings_df.withColumn(\"rating\", ratings_df[\"rating\"].cast(\"float\"))\r\n\r\n\r\nprint(\"Movies schema:\")\r\nmovies_df.printSchema()\r\nprint(\"\\nRatings schema:\")\r\nratings_df.printSchema()\r\n\r\nprint(\"\\nSample movies data:\")\r\nmovies_df.show(5, truncate=False)\r\nprint(\"\\nSample ratings data:\")\r\nratings_df.show(5, truncate=False)\r\n",
      "user": "anonymous",
      "dateUpdated": "2025-03-23T12:06:15+0000",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Movies schema:\nroot\n |-- movieId: string (nullable = true)\n |-- title: string (nullable = true)\n |-- genres: string (nullable = true)\n\n\nRatings schema:\nroot\n |-- userId: string (nullable = true)\n |-- movieId: string (nullable = true)\n |-- rating: float (nullable = true)\n |-- timestamp: string (nullable = true)\n\n\nSample movies data:\n+-------+----------------------------------+-------------------------------------------+\n|movieId|title                             |genres                                     |\n+-------+----------------------------------+-------------------------------------------+\n|1      |Toy Story (1995)                  |Adventure|Animation|Children|Comedy|Fantasy|\n|2      |Jumanji (1995)                    |Adventure|Children|Fantasy                 |\n|3      |Grumpier Old Men (1995)           |Comedy|Romance                             |\n|4      |Waiting to Exhale (1995)          |Comedy|Drama|Romance                       |\n|5      |Father of the Bride Part II (1995)|Comedy                                     |\n+-------+----------------------------------+-------------------------------------------+\nonly showing top 5 rows\n\n\nSample ratings data:\n+------+-------+------+----------+\n|userId|movieId|rating|timestamp |\n+------+-------+------+----------+\n|1     |296    |5.0   |1147880044|\n|1     |306    |3.5   |1147868817|\n|1     |307    |5.0   |1147868828|\n|1     |665    |5.0   |1147878820|\n|1     |899    |3.5   |1147868510|\n+------+-------+------+----------+\nonly showing top 5 rows\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://volodymyr-butko-20250322-m.us-central1-c.c.ucu-hadoop.internal:40417/jobs/job?id=43",
              "$$hashKey": "object:4851"
            },
            {
              "jobUrl": "http://volodymyr-butko-20250322-m.us-central1-c.c.ucu-hadoop.internal:40417/jobs/job?id=44",
              "$$hashKey": "object:4852"
            },
            {
              "jobUrl": "http://volodymyr-butko-20250322-m.us-central1-c.c.ucu-hadoop.internal:40417/jobs/job?id=45",
              "$$hashKey": "object:4853"
            },
            {
              "jobUrl": "http://volodymyr-butko-20250322-m.us-central1-c.c.ucu-hadoop.internal:40417/jobs/job?id=46",
              "$$hashKey": "object:4854"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1742731484715_1801846107",
      "id": "20170907-200823_323163859",
      "dateCreated": "2025-03-23T12:04:44+0000",
      "dateStarted": "2025-03-23T12:06:15+0000",
      "dateFinished": "2025-03-23T12:06:16+0000",
      "status": "FINISHED",
      "focus": true,
      "$$hashKey": "object:4599"
    },
    {
      "title": "Task 1: For each user, find total number of ratings provided",
      "text": "%pyspark\n\nfrom pyspark.sql.functions import count as sql_count\n\nuser_ratings_count = ratings_df \\\n    .groupBy(\"userId\") \\\n    .agg(sql_count(\"rating\").alias(\"ratings_count\"))\n\nprint(\"\\nNumber of ratings per user (sample):\")\nuser_ratings_count.show(10)",
      "user": "anonymous",
      "dateUpdated": "2025-03-23T12:07:55+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "editorHide": false,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nNumber of ratings per user (sample):\n+------+-------------+\n|userId|ratings_count|\n+------+-------------+\n|   296|          388|\n|   467|           20|\n|   675|          129|\n|   691|           57|\n|   829|          105|\n|  1090|           27|\n|  1159|           87|\n|  1436|          505|\n|  1512|           41|\n|  1572|           92|\n+------+-------------+\nonly showing top 10 rows\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://volodymyr-butko-20250322-m.us-central1-c.c.ucu-hadoop.internal:40417/jobs/job?id=47",
              "$$hashKey": "object:4924"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1742731484715_571927121",
      "id": "20170907-201504_56102511",
      "dateCreated": "2025-03-23T12:04:44+0000",
      "dateStarted": "2025-03-23T12:07:56+0000",
      "dateFinished": "2025-03-23T12:08:22+0000",
      "status": "FINISHED",
      "$$hashKey": "object:4600"
    },
    {
      "title": "Task 2: How many movies an average user has ranked?",
      "text": "%pyspark\n\nfrom pyspark.sql.functions import sum as sql_sum\n\ntotal_users = user_ratings_count.count()\ntotal_ratings = user_ratings_count \\\n    .agg(sql_sum(\"ratings_count\")) \\\n    .collect()[0][0]\navg_ratings_per_user = total_ratings / total_users\n\nprint(\"\\nAverage movies ranked per user:\")\nprint(avg_ratings_per_user)",
      "user": "anonymous",
      "dateUpdated": "2025-03-23T12:12:47+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "editorHide": false,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://volodymyr-butko-20250322-m.us-central1-c.c.ucu-hadoop.internal:40417/jobs/job?id=49",
              "$$hashKey": "object:5249"
            },
            {
              "jobUrl": "http://volodymyr-butko-20250322-m.us-central1-c.c.ucu-hadoop.internal:40417/jobs/job?id=50",
              "$$hashKey": "object:5250"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1742731484715_1277788596",
      "id": "20170907-210255_509274879",
      "dateCreated": "2025-03-23T12:04:44+0000",
      "dateStarted": "2025-03-23T12:12:47+0000",
      "dateFinished": "2025-03-23T12:13:38+0000",
      "status": "FINISHED",
      "$$hashKey": "object:4601",
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nAverage movies ranked per user:\n153.80793153727367\n"
          }
        ]
      }
    },
    {
      "title": "Task 3: For each user, find the minimum, maximum and average rating they provided",
      "text": "%pyspark\n\nfrom pyspark.sql.functions import min as sql_min, max as sql_max, avg as sql_avg\n\nuser_rating_stats = ratings_df \\\n    .groupBy(\"userId\") \\\n    .agg(\n        sql_min(\"rating\").alias(\"min_rating\"),\n        sql_max(\"rating\").alias(\"max_rating\"),\n        sql_avg(\"rating\").alias(\"avg_rating\")\n    )\n\nprint(\"\\nMin, max, and average ratings per user (sample):\")\nuser_rating_stats.show(10)",
      "user": "anonymous",
      "dateUpdated": "2025-03-23T12:15:06+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "editorHide": false,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nMin, max, and average ratings per user (sample):\n+------+----------+----------+------------------+\n|userId|min_rating|max_rating|        avg_rating|\n+------+----------+----------+------------------+\n|   296|       0.5|       5.0|2.8762886597938144|\n|   467|       2.5|       4.5|             3.425|\n|   675|       2.5|       5.0|3.8255813953488373|\n|   691|       2.5|       5.0| 4.333333333333333|\n|   829|       0.5|       4.5| 2.942857142857143|\n|  1090|       1.0|       5.0| 4.148148148148148|\n|  1159|       0.5|       5.0|3.7471264367816093|\n|  1436|       1.0|       5.0| 3.485148514851485|\n|  1512|       1.0|       5.0| 4.390243902439025|\n|  1572|       1.0|       5.0|3.8369565217391304|\n+------+----------+----------+------------------+\nonly showing top 10 rows\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://volodymyr-butko-20250322-m.us-central1-c.c.ucu-hadoop.internal:40417/jobs/job?id=51",
              "$$hashKey": "object:5295"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1742731484715_2033652365",
      "id": "20170907-205249_1462604242",
      "dateCreated": "2025-03-23T12:04:44+0000",
      "status": "FINISHED",
      "$$hashKey": "object:4602",
      "dateFinished": "2025-03-23T12:15:34+0000",
      "dateStarted": "2025-03-23T12:15:06+0000"
    },
    {
      "title": "Task 4: Find top 10 movies by average rating (with at least 100 ratings)",
      "text": "%pyspark\n\nfrom pyspark.sql.functions import avg as sql_avg, count as sql_count\n\nmovie_rating_stats = ratings_df.groupBy(\"movieId\") \\\n    .agg(\n        sql_avg(\"rating\").alias(\"avg_rating\"),\n        sql_count(\"rating\").alias(\"ratings_count\")\n    )\n\npopular_movies = movie_rating_stats \\\n    .filter(movie_rating_stats.ratings_count >= 100)\n\nmovie_avg_with_names = popular_movies \\\n    .join(movies_df, popular_movies.movieId == movies_df.movieId) \\\n    .select(\n        movies_df.title,\n        popular_movies.avg_rating\n    )\n\n\ntop_10_movies = movie_avg_with_names \\\n    .orderBy(\"avg_rating\", ascending=False) \\\n    .limit(10)\n\nprint(\"\\nTop 10 movies by average rating (with at least 100 ratings):\")\ntop_10_movies.show(truncate=False)",
      "user": "anonymous",
      "dateUpdated": "2025-03-23T12:20:18+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "editorHide": false,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nTop 10 movies by average rating (with at least 100 ratings):\n+--------------------------------+------------------+\n|title                           |avg_rating        |\n+--------------------------------+------------------+\n|Planet Earth II (2016)          |4.483096085409253 |\n|Planet Earth (2006)             |4.464796794504865 |\n|Shawshank Redemption, The (1994)|4.413576004516335 |\n|Band of Brothers (2001)         |4.398598820058997 |\n|Cosmos                          |4.3267148014440435|\n|Godfather, The (1972)           |4.324336165187245 |\n|Blue Planet II (2017)           |4.289833080424886 |\n|Usual Suspects, The (1995)      |4.284353213163313 |\n|Twin Peaks (1989)               |4.267361111111111 |\n|Godfather: Part II, The (1974)  |4.2617585117585115|\n+--------------------------------+------------------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://volodymyr-butko-20250322-m.us-central1-c.c.ucu-hadoop.internal:40417/jobs/job?id=52",
              "$$hashKey": "object:5374"
            },
            {
              "jobUrl": "http://volodymyr-butko-20250322-m.us-central1-c.c.ucu-hadoop.internal:40417/jobs/job?id=53",
              "$$hashKey": "object:5375"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1742731484715_1980314889",
      "id": "20170907-210004_1625380893",
      "dateCreated": "2025-03-23T12:04:44+0000",
      "status": "FINISHED",
      "$$hashKey": "object:4603",
      "dateFinished": "2025-03-23T12:20:47+0000",
      "dateStarted": "2025-03-23T12:20:18+0000"
    },
    {
      "title": "Task 5: Provide a list of genre preferences for each user",
      "text": "%pyspark\n\nfrom pyspark.sql.functions import avg as sql_avg, count as sql_count\n\nmovie_genres = movies_df.withColumn(\n    \"genre\", \n    explode(split(movies_df.genres, \"\\\\|\"))\n).select(\"movieId\", \"genre\")\n\nmovie_genres.createOrReplaceTempView(\"movie_genres\")\nratings_df.createOrReplaceTempView(\"ratings\")\n\nuser_genre_df = ratings_df.join(movie_genres, \"movieId\")\nuser_genre_stats = user_genre_df \\\n    .groupBy(\"userId\", \"genre\") \\\n    .agg(\n        sql_count(\"rating\").alias(\"ratings_count\"),\n        sql_avg(\"rating\").alias(\"avg_rating\")\n    )\n\nprint(\"\\nGenre preferences for users using DataFrame API (sample):\")\nuser_genre_stats.show(10, truncate=False)",
      "user": "anonymous",
      "dateUpdated": "2025-03-23T12:30:51+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "editorHide": false,
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nGenre preferences for users using DataFrame API (sample):\n+------+-------+-------------+------------------+\n|userId|genre  |ratings_count|avg_rating        |\n+------+-------+-------------+------------------+\n|33    |Drama  |17           |4.205882352941177 |\n|47    |Western|3            |4.0               |\n|71    |Action |16           |4.25              |\n|139   |Musical|2            |3.25              |\n|163   |War    |2            |3.75              |\n|164   |Fantasy|21           |3.9285714285714284|\n|169   |Western|2            |3.75              |\n|172   |Drama  |96           |3.84375           |\n|174   |Musical|3            |2.5               |\n|183   |Drama  |19           |4.2105263157894735|\n+------+-------+-------------+------------------+\nonly showing top 10 rows\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://volodymyr-butko-20250322-m.us-central1-c.c.ucu-hadoop.internal:40417/jobs/job?id=54",
              "$$hashKey": "object:5458"
            },
            {
              "jobUrl": "http://volodymyr-butko-20250322-m.us-central1-c.c.ucu-hadoop.internal:40417/jobs/job?id=55",
              "$$hashKey": "object:5459"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1742731484715_144478007",
      "id": "20170907-210326_346981091",
      "dateCreated": "2025-03-23T12:04:44+0000",
      "status": "FINISHED",
      "$$hashKey": "object:4604",
      "dateFinished": "2025-03-23T12:31:41+0000",
      "dateStarted": "2025-03-23T12:30:51+0000"
    },
    {
      "text": "%pyspark\n",
      "user": "anonymous",
      "dateUpdated": "2025-03-23T12:04:44+0000",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1742731484715_568522875",
      "id": "paragraph_1742690866363_1537852192",
      "dateCreated": "2025-03-23T12:04:44+0000",
      "status": "READY",
      "$$hashKey": "object:4605"
    }
  ],
  "name": "Homework 2 - DataFrame operations - 2025",
  "id": "2KQDSQ3GT",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0-preview2",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false,
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {},
  "path": "/Homework 2 - DataFrame operations - 2025"
}